{
  "repository": {
    "entity": {
      "patterns": [
        // {
        //   "match": "^(\\bfunc\\b)\\s\\(([a-z]+)\\s(\\*)?([a-zA-Z]+)\\)",
        //   "captures": {
        //     "1": {"name": "keyword.function.go"},
        //     "2": {"name": "variable.other.receiver.go"},
        //     "3": {"name": "keyword.operator.address.go"},
        //     "4": {"name": "entity.name.type.receiver.go"},
        //   }
        // },
        {
          "match": "^(\\bfunc\\b)\\s(\\w+)?\\(([a-z]+)\\s(\\*)?([a-zA-Z]+)\\)",
          "captures": {
            "1": {"name": "keyword.function.go"},
            "2": {"name": "entity.name.function.go"},
            "3": {"name": "variable.other.receiver.go"},
            "4": {"name": "keyword.operator.address.go"},
            "5": {"name": "entity.name.type.receiver.go"},
          }
        },
        {
          "match": "(\\*)\\w+(\\.)(\\w+)",
          "captures": {
            "1": {"name": "keyword.operator.address.go"},
            "2": {"name": "punctuation.other.period.go"},
            "3": {"name": "entity.name.type.go"},
          }
        },
        // ====================================================================
        {
          "comment": "Function declarations",
          "match": "^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
          "captures": {
            "1": {"name": "keyword.function.go"},
            "2": {
              "patterns": [
                {"include": "#brackets"},
                {"include": "#operators"},
                {"include": "#variable"},
              ]
            },
            "3": {
              "patterns": [
                {
                  "match": "\\d\\w*",
                  "name": "invalid.illegal.identifier.go"
                },
                {
                  "match": "\\w+",
                  "name": "entity.name.function.go"
                }
              ]
            }
          }
        },
        {
          "comment": "Functions",
          "match": "(\\bfunc\\b)|(\\w+)(?=\\()",
          "captures": {
            "1": {"name": "keyword.function.go"},
            "2": {"patterns": [
              {
                "match": "\\d\\w*",
                "name": "invalid.illegal.identifier.go"
              },
              {
                "match": "\\w+",
                "name": "support.function.go"
              },
            ]}
          }
        },
        {
          "begin": "\\b(package)\\s+",
          "beginCaptures": {"1": {"name": "keyword.package.go"}},
          "end": "(?!\\G)",
          "patterns": [
            {
              "match": "\\d\\w*",
              "name": "invalid.illegal.identifier.go"
            },
            {
              "match": "\\w+",
              "name": "entity.name.package.go"
            }
          ]
        },
        {
          "begin": "\\b(type)\\s+",
          "beginCaptures": {"1": {"name": "keyword.type.go"}},
          "end": "(?!\\G)",
          "patterns": [
            {
              "match": "\\d\\w*",
              "name": "invalid.illegal.identifier.go"
            },
            {
              "match": "\\w+",
              "name": "entity.name.type.go"
            }
          ]
        },
        {
          "match": "(?!interface|struct)(?>\\w+)(?=\\{)",
          "name": "entity.name.type.struct.go",
        },
        {
          "match": "(?<=\\[\\])(?>\\w+)",
          "name": "entity.name.type.go",
        },
        {
          "match": "(chan)\\s(\\*)(?>\\w+)",
          "name": "entity.name.type.go",
          "captures": {
            "1": {"name": "keyword.channel.go"},
            "2": {"name": "keyword.operator.pointer.go"},
            "3": {"name": "entity.name.type.channel.go"},
          }
        },
      ]
    }
  }
}
